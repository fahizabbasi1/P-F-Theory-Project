#include <iostream>
#include <fstream>
#include <string>
#include <limits>
using namespace std;

class Student {
private:
    string name;
    int rollNo;
    int age;
    string department;
    int marks[5];

public:
    
    Student(string name = "", int rollNo = 0, int age = 0, string department = "") {
        this->name = name;
        this->rollNo = rollNo;
        this->age = age;
        this->department = department;
        for (int i = 0; i < 5; i++) {
            marks[i] = 0;
        }
    }

    void inputDetails() {
        cout << "Enter student name: ";
        getline(cin, name);
        
        cout << "Enter roll number: ";
        cin >> rollNo;

        while (rollNo <= 0) {
            cout << "Invalid roll number! Enter again: ";
            cin >> rollNo;
        }

        cout << "Enter age: ";
        cin >> age;
        
        while (age <= 0 || age > 100) {
            cout << "Invalid age! Enter again: ";
            cin >> age;
        }

        cin.ignore();
        cout << "Enter department: ";
        getline(cin, department);

        
        for (int i = 0; i < 5; i++) {
            cout << "Enter marks for subject " << i + 1 << ": ";
            cin >> marks[i];
            while (marks[i] < 0 || marks[i] > 100) {
                cout << "Invalid marks! Enter again (0 to 100): ";
                cin >> marks[i];
            }
        }
    }

    void displayDetails() const {
        cout << name << "\t" << rollNo << "\t" << age << "\t" << department << "\t";
        for (int i = 0; i < 5; i++) {
            cout << marks[i] << " ";
        }
        cout << endl;
    }

    int getRollNo() const {
        return rollNo;
    }

    // Save to file format: name, rollNo, age, department, marks
    void saveToFile(ofstream &outFile) const {
        outFile << name << "\n" << rollNo << "\n" << age << "\n" << department << "\n";
        for (int i = 0; i < 5; i++) {
            outFile << marks[i] << " ";
        }
        outFile << "\n";
    }

    // Load data from file format: name, rollNo, age, department, marks
    void loadFromFile(ifstream &inFile) {
        getline(inFile, name);
        inFile >> rollNo >> age;
        inFile.ignore();
        getline(inFile, department);
        for (int i = 0; i < 5; i++) {
            inFile >> marks[i];
        }
        inFile.ignore();
    }

    // Update student details
    void updateDetails() {
        inputDetails();
    }

    void deleteStudent() {
        name = "";
        rollNo = 0;
        age = 0;
        department = "";
        for (int i = 0; i < 5; i++) {
            marks[i] = 0;
        }
    }
};

class StudentPortal {
private:
    Student students[100];
    int studentCount;

public:
    StudentPortal() {
        studentCount = 0;
    }

    void addStudent() {
        if (studentCount < 100) {
            students[studentCount].inputDetails();
            studentCount++;
            cout << "Student added successfully!" << endl;
        } else {
            cout << "Maximum student limit reached!" << endl;
        }
    }

    void displayAllStudents() const {
        if (studentCount == 0) {
            cout << "No students to display!" << endl;
            return;
        }

        cout << "\nStudent List:\n";
        cout << "Name\tRoll No\tAge\tDepartment\tMarks\n";
        for (int i = 0; i < studentCount; i++) {
            students[i].displayDetails();
        }
    }

    void searchStudent(int rollNo) const {
        bool found = false;
        for (int i = 0; i < studentCount; i++) {
            if (students[i].getRollNo() == rollNo) {
                cout << "Student found: " << endl;
                students[i].displayDetails();
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "No student found with roll number " << rollNo << endl;
        }
    }

    void updateStudent(int rollNo) {
        for (int i = 0; i < studentCount; i++) {
            if (students[i].getRollNo() == rollNo) {
                cout << "Updating student details:" << endl;
                students[i].updateDetails();
                cout << "Student details updated!" << endl;
                return;
            }
        }
        cout << "Student with roll number " << rollNo << " not found!" << endl;
    }

    void deleteStudent(int rollNo) {
        for (int i = 0; i < studentCount; i++) {
            if (students[i].getRollNo() == rollNo) {
                for (int j = i; j < studentCount - 1; j++) {
                    students[j] = students[j + 1];
                }
                students[studentCount - 1].deleteStudent();
                studentCount--;
                cout << "Student deleted successfully!" << endl;
                return;
            }
        }
        cout << "Student with roll number " << rollNo << " not found!" << endl;
    }

    void saveToFile() const {
        ofstream outFile("students.txt");
        if (!outFile) {
            cout << "Error opening file!" << endl;
            return;
        }
        for (int i = 0; i < studentCount; i++) {
            students[i].saveToFile(outFile);
        }
        cout << "Data saved to file!" << endl;
    }

    void loadFromFile() {
        ifstream inFile("students.txt");
        if (!inFile) {
            cout << "No data file found!" << endl;
            return;
        }
        studentCount = 0;
        while (!inFile.eof()) {
            students[studentCount].loadFromFile(inFile);
            studentCount++;
        }
        cout << "Data loaded from file!" << endl;
    }
};

int main() {
    StudentPortal portal;
    int choice, rollNo;

    portal.loadFromFile();  // Load data from file at the start

    do {
        cout << "\nStudent Portal Menu\n";
        cout << "1. Add Student\n";
        cout << "2. Display All Students\n";
        cout << "3. Search Student\n";
        cout << "4. Update Student\n";
        cout << "5. Delete Student\n";
        cout << "6. Save Data to File\n";
        cout << "7. Load Data from File\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1:
                portal.addStudent();
                break;
            case 2:
                portal.displayAllStudents();
                break;
            case 3:
                cout << "Enter roll number to search: ";
                cin >> rollNo;
                portal.searchStudent(rollNo);
                break;
            case 4:
                cout << "Enter roll number to update: ";
                cin >> rollNo;
                portal.updateStudent(rollNo);
                break;
            case 5:
                cout << "Enter roll number to delete: ";
                cin >> rollNo;
                portal.deleteStudent(rollNo);
                break;
            case 6:
                portal.saveToFile();
                break;
            case 7:
                portal.loadFromFile();
                break;
            case 8:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
